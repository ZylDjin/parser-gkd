package com.company.parser.mapper;

import com.company.parser.model.dto.*;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.util.List;

/**
 * –ú–∞–ø–ø–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
@Component
public class NotificationMapper {

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ NotificationDTO –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
     */
    public NotificationDTO toPriceChangeNotification(List<PriceChangeDTO> changes,
                                                     StatisticsDTO statistics) {

        String subject = generateSubject(changes);
        String message = generateMessage(changes, statistics);

        return NotificationDTO.builder()
                .type(NotificationDTO.NotificationType.PRICE_CHANGE)
                .subject(subject)
                .message(message)
                .priceChanges(changes)
                .statistics(statistics)
                .timestamp(Instant.now())
                .priority(calculatePriority(changes))
                .build();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    public NotificationDTO toErrorNotification(String error, String details) {
        return NotificationDTO.builder()
                .type(NotificationDTO.NotificationType.PARSING_ERROR)
                .subject("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                .message(String.format("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s\n\n–î–µ—Ç–∞–ª–∏:\n%s", error, details))
                .timestamp(Instant.now())
                .priority(NotificationDTO.NotificationPriority.HIGH)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    public NotificationDTO toCompletionNotification(ParsingResultDTO result,
                                                    StatisticsDTO statistics) {

        String subject = result.isSuccess() ?
                "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω" :
                "‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏";

        String message = String.format(
                "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω\n" +
                        "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %s\n" +
                        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: %d\n" +
                        "–£—Å–ø–µ—à–Ω—ã—Ö: %d\n" +
                        "–° –æ—à–∏–±–∫–∞–º–∏: %d",
                result.getDuration(),
                result.getRecordsCount(),
                result.getSuccessfulRecords(),
                result.getFailedRecords()
        );

        return NotificationDTO.builder()
                .type(NotificationDTO.NotificationType.PARSING_COMPLETE)
                .subject(subject)
                .message(message)
                .statistics(statistics)
                .timestamp(Instant.now())
                .priority(NotificationDTO.NotificationPriority.NORMAL)
                .build();
    }

    private String generateSubject(List<PriceChangeDTO> changes) {
        long criticalCount = changes.stream()
                .filter(c -> c.getChangeType() != null && c.getChangeType().contains("CRITICAL"))
                .count();

        if (criticalCount > 0) {
            return String.format("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω (%d)", criticalCount);
        }

        return String.format("üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω (%d)", changes.size());
    }

    private String generateMessage(List<PriceChangeDTO> changes, StatisticsDTO statistics) {
        StringBuilder message = new StringBuilder();

        message.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n\n");

        if (statistics != null) {
            message.append(String.format("üìà –ü–æ–≤—ã—à–µ–Ω–∏–π: %d\n", statistics.getPriceIncreases()));
            message.append(String.format("üìâ –°–Ω–∏–∂–µ–Ω–∏–π: %d\n", statistics.getPriceDecreases()));
            message.append(String.format("üÜï –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: %d\n", statistics.getNewProducts()));
            message.append(String.format("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã—Ö: %d\n\n", statistics.getRemovedProducts()));
        }

        message.append("–î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –æ—Ç—á–µ—Ç–µ.");

        return message.toString();
    }

    private NotificationDTO.NotificationPriority calculatePriority(List<PriceChangeDTO> changes) {
        boolean hasCritical = changes.stream()
                .anyMatch(c -> c.getChangeType() != null && c.getChangeType().contains("CRITICAL"));

        if (hasCritical) {
            return NotificationDTO.NotificationPriority.HIGH;
        }

        if (changes.size() > 50) {
            return NotificationDTO.NotificationPriority.HIGH;
        }

        if (changes.size() > 10) {
            return NotificationDTO.NotificationPriority.NORMAL;
        }

        return NotificationDTO.NotificationPriority.LOW;
    }
}